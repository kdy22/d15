package digitaltwin;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jface.action.ContributionItem;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.ISelectionService;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.internal.Workbench;

import digitaltwin.activator.Activator;
import digitaltwin.editors.DigitalTwinEditor;
import digitaltwin.util.IIconConstants;
import digitaltwin.util.XmlUtil;

/**
  * 코드 생성 메뉴
  * @author : Administrator
  * 
 */
public class GenerateCodesMenu extends ContributionItem {

	public GenerateCodesMenu() {
		// TODO Auto-generated constructor stub
	}

	public GenerateCodesMenu(String id) {
		super(id);
		// TODO Auto-generated constructor stub
	}

	@Override
	public void fill(Menu menu, int index) {
		// Here you could get selection and decide what to do
		// You can also simply return if you do not want to show a menu

		// create the menu item
		MenuItem menuItem = new MenuItem(menu, SWT.CHECK, index);
		menuItem.setText("Generate Codes");
		menuItem.setImage(Activator.getImage(IIconConstants.GENERATECODES));
		menuItem.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				IProject project = getCurrentProject();
				String project_path = project.getLocation().toString();
				String xml_path = project_path+"\\"+project.getName()+".xml";
//				String xml_path = project_path+"\\"+"ModelStructure"+".xml";
				String codes_path = ResourcesPlugin.getWorkspace().getRoot().getLocation().toFile().getParent()+ "\\Common\\ModelSources";
				File codes_dir = new File(codes_path);

				FileInputStream fis = null;
				FileOutputStream fos = null;

				// Generate New Code
				File dest;
				
				//make directory
				File project_gen = new File(project_path + "\\GeneratedCodes");
				project_gen.mkdir();
				
			    // @author : cattom
			    // file directory generate
			   String root_path_directory = System.getProperty("user.dir");
			   File root_folder = new File(root_path_directory+File.separator+"root"+File.separator+".s2i"+File.separator+"bin");
			   
			   String sub_path_directory = root_path_directory+File.separator+"root"+File.separator+"files";
			   File sub_folder = new File(sub_path_directory);
			   
			   if(root_folder.exists())
			   {
				   System.out.println("해당경로가 존재합니다.");
			   }
			   else
			   {
				   root_folder.mkdirs();
			   }
			   
			   if(sub_folder.exists())
			   {
				   System.out.println("해당 경로가 존재합니다.");
			   }
			   else
			   {
				   sub_folder.mkdirs();
			   }
				//copy files - 생성된 코드들(common/modelsources폴더안에)을 복사하는것
				File[] files = codes_dir.listFiles();
				for (File file : files) 
				{
					dest = new File(project_gen.getAbsolutePath()+"\\"+file.getName());
					File copy_dest = new File(sub_path_directory+File.separator+file.getName());
					try {
						copyFile(file, dest);
						copyFile(file,copy_dest);
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				
				//modify xml
				File xml_file = new File(xml_path);
				File xml_copy = new File(project_gen.getAbsolutePath()+"\\"+"ModelStructure.xml");
				System.out.println("xml_copy : "+xml_file.getName());
				File git_copy_xml = new File(sub_path_directory+File.separator+"ModelStructure.xml");
				
				//1.copy xml
				try {
					copyFile(xml_file, xml_copy);
					copyFile(xml_file,git_copy_xml);
					
				} catch (IOException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
				
				//2.modify xml
				try {
					XmlUtil.modifyXmlForGeneratedCodes(xml_copy.getAbsolutePath());
				} catch (Exception e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
				
				
				try {
					project.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
				} catch (CoreException e1) {
					e1.printStackTrace();
				}

			}
		});
	}
	
	/**
	  *
	  * @param src
	  * @param dest
	  * @throws IOException
	  * 
	  * @see 파일을 복사한다(현재는 c코드 파일을 복사, 나중에는 xml 정보 기반으로 생성해야함)
	 */
	public static void copyFile(File src, File dest) throws IOException
	{
		InputStream is = null;
	    OutputStream os = null;
	    try {
	        is = new FileInputStream(src);
	        System.out.println(dest.getAbsolutePath());
	        os = new FileOutputStream(dest);

	        // the size of the buffer doesn't have to be exactly 1024 bytes, try playing around with this number and see what effect it will have on the performance
	        byte[] buffer = new byte[1024];
	        int length = 0;
	        while ((length = is.read(buffer)) > 0) {
	            os.write(buffer, 0, length);
	        }
		}finally {
			is.close();
			os.close();
		}	    
	}

	/**
	  *
	  * @return
	  * 
	  * 프로젝트를 가져온다
	 */
	public static IProject getCurrentProject() {
		ISelectionService selectionService = Workbench.getInstance().getActiveWorkbenchWindow().getSelectionService();

		ISelection selection = selectionService.getSelection();

		IProject project = null;
		if (selection instanceof IStructuredSelection) {
			Object element = ((IStructuredSelection) selection).getFirstElement();

			if (element instanceof IResource) {
				project = ((IResource) element).getProject();
			}
		}
		return project;
	}
}
